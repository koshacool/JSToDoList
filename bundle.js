!function(t){var n={};function c(s){if(n[s])return n[s].exports;var l=n[s]={i:s,l:!1,exports:{}};return t[s].call(l.exports,l,l.exports,c),l.l=!0,l.exports}c.m=t,c.c=n,c.d=function(t,n,s){c.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:s})},c.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},c.t=function(t,n){if(1&n&&(t=c(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(c.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)c.d(s,l,function(n){return t[n]}.bind(null,l));return s},c.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return c.d(n,"a",n),n},c.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},c.p="",c(c.s=0)}([function(t,n,c){t.exports=c(3)},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2FsZXJ0L3N0eWxlLnNjc3M/MTc2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguc2Nzcz9iYjY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/modules/localStorage/localStorageService.js\nconst TASKS_DB_NAME = 'localstorageTasks';\n\nclass LocalStorageService {\n  constructor () {\n    let tasks = JSON.parse(localStorage.getItem(TASKS_DB_NAME));\n\n    if (!tasks) {\n      tasks = [];\n      localStorage.setItem(TASKS_DB_NAME, JSON.stringify(tasks));\n    }\n\n    this.tasks = tasks;\n  }\n\n  get () {\n    return JSON.parse(localStorage.getItem(TASKS_DB_NAME));\n  }\n\n  set (data) {\n    return localStorage.setItem(TASKS_DB_NAME, JSON.stringify(data));\n  }\n\n  clear () {\n    localStorage.setItem(TASKS_DB_NAME, JSON.stringify([]));\n  }\n}\n\nconst storageService = new LocalStorageService();\n\n/* harmony default export */ var localStorageService = (storageService);\n\n// CONCATENATED MODULE: ./src/modules/task/constants.js\nconst taskTypes = {\n  learning: 'learning',\n  shopping: 'shopping',\n  traveling: 'traveling',\n  sport: 'sport',\n};\n\nconst taskStatuses = {\n  opened: 'opened',\n  completed: 'completed',\n};\n\nconst saveAction = {\n  update: 'update',\n  create: 'create',\n};\n\nconst taskSchema = {\n  id: {\n    type: 'string',\n  },\n\n  title: {\n    type: 'string',\n    isRequired: true,\n  },\n\n  type: {\n    type: 'string',\n    isRequired: true,\n  },\n\n  description: {\n    type: 'string',\n    isRequired: true,\n  },\n\n  status: {\n    type: 'string',\n  },\n};\n\n// CONCATENATED MODULE: ./src/modules/utils.js\n\n\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst countActiveTasks = tasks => tasks.reduce(\n  (prev, { status }) => status !== 'completed' ? prev + 1 : prev, 0);\n\nconst debounce = (func, delay = 300) => {\n  let timerId;\n\n  return data => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(() => func(data), delay);\n  };\n};\n\nconst sort = (a, b) => {\n  if (a.updatedAt < b.updatedAt) {\n    return 1;\n  }\n\n  if (a.updatedAt === b.updatedAt) {\n    return 0;\n  }\n\n  return -1;\n};\n\nconst sortTasks = tasksArr => {\n  const openedTasks = [];\n  const complitedTasks = [];\n\n  tasksArr.forEach(task => {\n    if (task.status === taskStatuses.completed) {\n      complitedTasks.push(task);\n    } else {\n      openedTasks.push(task);\n    }\n  });\n\n  return  [...openedTasks.sort(sort), ...complitedTasks.sort(sort)];\n};\n\n\n\n// CONCATENATED MODULE: ./src/modules/task/task.js\n\n\n\n\nclass task_Task {\n  constructor ({ id, title, type, description, status = taskStatuses.opened }) {\n    this.taskObj = {\n      id: id || generateId(),\n      title,\n      type,\n      description,\n      status,\n    };\n\n    this.saveAction = id ? saveAction.update : saveAction.create;\n  }\n\n  save () {\n    const tasks = localStorageService.get();\n    const validationResult = this.validate();\n    const task = { ...this.taskObj, updatedAt: new Date() };\n\n    return new Promise((resolve, reject) => {\n      if (validationResult.error)  {\n        return reject(validationResult);\n      } else {\n        if (this.saveAction === saveAction.create) {\n          tasks.push(task);\n        } else {\n          const taskIndex = tasks.findIndex(({ id }) => id === task.id);\n          tasks[taskIndex] = task;\n        }\n\n        localStorageService.set(tasks);\n        resolve({ task });\n      }      \n    });\n  }\n\n  static remove (taskId) {\n\n    return new Promise((resolve, reject) => {\n      try {    \n        const tasks = localStorageService.get();\n        const newTasks = tasks.filter(({ id }) => id !== taskId); \n          \n        localStorageService.set(newTasks);\n        resolve(newTasks);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  static removeAll () {\n    return new Promise((resolve, reject) => {\n      try {        \n        localStorageService.clear();\n        resolve([]);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n\n  static finishAll () {    \n    const tasks = localStorageService.get();\n    const savePromises = tasks.map(task => {\n      const newTask = new task_Task({\n        ...task,\n        status: taskStatuses.completed,\n      });\n\n      return newTask.save();            \n    });\n\n    return Promise.all(savePromises);\n  }\n\n\n  static validateField (name, value) {\n    if (\n      (taskSchema[name].isRequired && !value.trim())\n      || typeof value !== taskSchema[name].type\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  validate () {\n    const validationResult = {\n      notValidFields: {},\n    };\n\n    Object.keys(taskSchema).forEach(fieldName => {\n      const isValid = task_Task.validateField(fieldName, this.taskObj[fieldName]);\n\n      validationResult.notValidFields[fieldName] = isValid;\n\n      if (!isValid) {\n        validationResult.error = true;\n        validationResult.message = 'Not valid field';\n      }\n    });\n\n    return validationResult;\n  }\n}\n\n/* harmony default export */ var task_task = (task_Task);\n\n// CONCATENATED MODULE: ./src/modules/alert/constants.js\nconst alertTypes = {\n  error: 'error',\n  success: 'success',\n};\n\nconst alertClasses = {\n  [alertTypes.error]: 'error-message',\n  [alertTypes.success]: 'success-message',\n};\n\nconst defaultShowingDuration = 2000;\n// EXTERNAL MODULE: ./src/modules/alert/style.scss\nvar style = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/modules/alert/alert.js\n\n\n\n\n\nclass alert_Alert {\n  constructor () {\n    this.init();\n\n    this.showError = this.showError.bind(this);\n    this.hideMessage = this.hideMessage.bind(this);\n    this.createMessageElement = this.createMessageElement.bind(this);\n  }\n\n  init () {\n    const $mountPoint = document.getElementById('app');\n    const $alertBlock = document.createElement('div');\n\n    $alertBlock.className = 'alert-container';\n    $alertBlock.id = 'alert-container';\n\n    $mountPoint.appendChild($alertBlock);\n\n    this.$mainBlock = document.getElementById('alert-container');\n  }\n\n  showError ({ message }, duration = defaultShowingDuration) {\n    const $element = this.createMessageElement(alertTypes.error, message);\n    this.$mainBlock.appendChild($element);\n\n\n    setTimeout(this.hideMessage($element), duration);\n  }\n\n  showSuccess (message, duration = defaultShowingDuration) {\n    const $element = this.createMessageElement(alertTypes.success, message);\n    this.$mainBlock.appendChild($element);\n\n    setTimeout(this.hideMessage($element), duration);\n  }\n\n  hideMessage ($element) {\n    return () => this.$mainBlock.removeChild($element);\n  }\n\n  createMessageElement (type, message) {\n    const $messageBlock = document.createElement('div');\n\n    $messageBlock.className = `${alertClasses[type]} alert-container__message`;\n    $messageBlock.innerHTML = message;\n\n    return $messageBlock;\n  }\n}\n\nconst alertService = new alert_Alert();\n\n/* harmony default export */ var alert_alert = (alertService);\n// CONCATENATED MODULE: ./src/modules/modal.js\n\n\n\n\n\nconst ERROR_CLASS_NAME = 'validation-error';\n\nclass modal_FormModal {\n  constructor () {\n    this.$rootComponent = null;\n\n    this.initModal = this.initModal.bind(this);\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n    this.saveForm = this.saveForm.bind(this);\n    this.createTaskForm = this.createTaskForm.bind(this);\n    this.onInputKeyUp = this.onInputKeyUp.bind(this);\n\n    this.initModal();\n    this.initEventListeners();\n  }\n\n  initModal () {\n    const $mainBlock = document.getElementById('app');\n    const $modal = document.createElement('div');\n\n    $modal.className = 'modal';\n    $modal.id = 'form-modal';\n    $modal.innerHTML = `\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <span id=\"modal-close\" class=\"close\">&times;</span>\n          <h2 id=\"modal-title\" class=\"modal-title\">Modal title</h2>\n        </div>\n        <div id=\"modal-body\" class=\"modal-body\"></div>\n        <div class=\"modal-footer\">\n          <button id=\"form-modal-save\" class=\"button\">Save</button>\n        </div>\n      </div>\n  `;\n\n    $mainBlock.appendChild($modal);\n\n    this.$rootComponent = document.getElementById('form-modal');\n  }\n\n  initEventListeners () {\n    const $closeButton = document.getElementById('modal-close');\n    const $saveButton = document.getElementById('form-modal-save');\n\n    $closeButton.addEventListener('click', this.close);\n    $saveButton.addEventListener('click', this.saveForm);\n  }\n\n  createTaskForm (task = {}) {\n    const { id = '', title = '', description = '', status = '' } = task;\n    const $modalBody = document.getElementById('modal-body');\n    const $typesBlock = this.createTypesSelect(task);\n\n    const $formBlock = document.createElement('form');\n    $formBlock.className = 'task-form';\n    $formBlock.id = 'task-form';\n    $formBlock.innerHTML = `\n      <div class=\"form-group\">\n        <label for=\"title\"><i class=\"fa fa-car\"></i> Title</label>\n        <input type=\"text\" class=\"form-input\" id=\"title\" \n          name=\"title\" placeholder=\"Enter title\" value=${title}>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"description\"><i class=\"fa fa-car\"></i> Description</label>\n        <textarea rows=\"4\" cols=\"100\" name=\"description\" form=\"task-form\" \n          name=\"description\" id=\"description\">\n          ${description}\n        </textarea>\n      </div>\n    `;\n    $formBlock.appendChild($typesBlock);\n\n    if (id) {\n      const $idInput = document.createElement('input');\n\n      $idInput.type = 'hidden';\n      $idInput.className = 'task-id';\n      $idInput.setAttribute('value', id);\n      $idInput.setAttribute('name', 'id');\n\n      $formBlock.appendChild($idInput);\n    }\n\n    if (status) {\n      const $statusInput = document.createElement('input');\n\n      $statusInput.type = 'hidden';\n      $statusInput.className = 'task-status';\n      $statusInput.setAttribute('value', status);\n      $statusInput.setAttribute('name', 'status');\n\n      $formBlock.appendChild($statusInput);\n    }\n\n    if ($modalBody.hasChildNodes()) {\n      $modalBody.firstChild.replaceWith($formBlock);\n    } else {\n      $modalBody.appendChild($formBlock);\n    }\n\n    const formInputs = document.getElementById('task-form').elements;\n\n    for (let i = 0; i < formInputs.length; i++) {\n      formInputs[i].addEventListener('keyup', this.onInputKeyUp);\n    }\n  }\n\n  createTypesSelect ({ type = '' }) {\n    const $typesBlock = document.createElement('div');\n    $typesBlock.className = 'form-group';\n    $typesBlock.innerHTML = `\n      <label for=\"type\"><i class=\"fa fa-car\"></i> Task Type</label>\n    `;\n\n    const $select = document.createElement('select');\n    $select.className = 'form-control';\n    $select.setAttribute('name', 'type');\n\n    Object.values(taskTypes).forEach(taskType => {\n      const $option = document.createElement('option');\n      $option.setAttribute('value', taskType);\n\n      if (taskType === type) {\n        $option.setAttribute('selected', 'selected');\n      }\n\n      $option.innerHTML = taskType;\n      $select.appendChild($option);\n    });\n\n    $typesBlock.appendChild($select);\n\n    return $typesBlock;\n  }\n\n  open (callback,  data = {}) {\n    this.callback = callback;\n    const $modalTitle = document.getElementById('modal-title');\n\n    if (data.id) {\n      $modalTitle.innerHTML = 'Edit Task';\n    } else {\n      $modalTitle.innerHTML = 'Create Task';\n    }\n\n    this.createTaskForm(data);\n\n    this.$rootComponent.style.display = 'block';\n  }\n\n  close () {\n    this.callback = null;\n    this.$rootComponent.style.display = 'none';\n  }\n\n  saveForm () {\n    const taskData = {};\n    const formInputs = document.getElementById('task-form').elements;\n\n    for (let i = 0; i < formInputs.length; i++) {\n      const { name, value } = formInputs[i];\n      taskData[name] = value;\n    }\n\n    const task = new task_task(taskData);\n    task.save()\n      .then(({ task }) => {\n        this.callback && this.callback(task);\n        this.close();\n      })\n      .catch(error => {\n        const { notValidFields } = error;\n\n        for (let i = 0; i < formInputs.length; i++) {\n          const { name } = formInputs[i];\n\n          this.highlightInput(formInputs[i], notValidFields[name]);\n         \n        }\n        \n        alert_alert.showError(error);\n      });\n  }\n\n  onInputKeyUp ({ target }) {\n    const { name, value } = target;\n    const isValid = task_task.validateField(name, value);\n\n    this.highlightInput(target, isValid);\n  }\n\n  highlightInput ($input, isValid) {\n    if (!isValid) {\n      $input.classList.add(ERROR_CLASS_NAME);\n    } else {\n      $input.classList.remove(ERROR_CLASS_NAME);\n    }\n  }\n}\n\nconst modalController = new modal_FormModal();\n\n/* harmony default export */ var modal = (modalController);\n\n// CONCATENATED MODULE: ./src/modules/taskList/constants.js\n\n\nconst mainActionsBlockId = 'main-page__actions';\n\nconst countBlockId = 'tasks-count';\n\nconst listBlockId = 'tasks-list';\n\nconst addButtonClass = 'add-task';\nconst finishAllButtonClass = 'finish-all-tasks';\nconst removeAllButtonClass = 'remove-all-tasks';\n\n// Filters buttons\nconst taskTypeSelectId = 'filters__task-type';\nconst inputFilterId = 'filters__search';\nconst filterButtonsBlockId = 'filters__buttons';\nconst filterButtonsClasses = {\n  ...taskStatuses,\n  all: 'all',\n};\n\n// CONCATENATED MODULE: ./src/modules/taskList/taskList.js\n\n\n\n\n\n\n\nclass taskList_TaskList {\n  constructor (tasks) {\n    this.tasks = tasks;\n\n    this.filtersState = {\n      status: filterButtonsClasses.all,\n      type: 'all',\n      text: '',\n    };\n\n    this.initCommonStructure();\n\n    this.$mainActionsBlock = document.getElementById(mainActionsBlockId);\n    this.$taskTypeSelect = document.getElementById(taskTypeSelectId);\n    this.$inputFilter = document.getElementById(inputFilterId);\n    this.$filterButtonsBlock = document.getElementById(filterButtonsBlockId);\n    this.$listBlock = document.getElementById(listBlockId);\n    this.$taskCount = document.getElementById(countBlockId);\n\n    this.onClickFilterButtons = this.onClickFilterButtons.bind(this);\n    this.onChangeType = this.onChangeType.bind(this);\n    this.onInput = this.onInput.bind(this);\n    this.renderTasks = this.renderTasks.bind(this);\n    this.onTaskChange = this.onTaskChange.bind(this);\n    this.onCreateTask = this.onCreateTask.bind(this);\n\n    this.onEditTask = this.onEditTask.bind(this);\n    this.onClickMainActions = this.onClickMainActions.bind(this);\n    this.onClickFilterButtons = this.onClickFilterButtons.bind(this);\n\n    this.renderTasks();\n    this.initEventListeners();\n  }\n\n  initCommonStructure () {\n    const { status } = this.filtersState;\n    const $mainBlock = document.getElementById('app');\n    const $taskList = document.createElement('div');\n\n    $taskList.className = 'task-list-container';\n    $taskList.id = 'task-list-container';\n    $taskList.innerHTML = `\n      <div id=${mainActionsBlockId} class=${mainActionsBlockId}>\n\t\t<button class=\"button ${addButtonClass}\">Add</button>\n\t\t<button class=\"button ${finishAllButtonClass}\">Finish all</button>\n\t\t<button class=\"button ${removeAllButtonClass}\">Remove all</button>\n\t</div>\n\n\t<div class=\"filters\">\n\t\t<div class=\"filters__types\">\n\t\t\t<select class=\"task-types\" id=${taskTypeSelectId} name=\"type\">\n          <option value=\"all\">\n            all\n          </option>\n          <option value=\"learning\">\n          \tlearning\n          </option>\n          <option value=\"shopping\">\n            shopping\n          </option>\n          <option value=\"traveling\">\n            traveling\n          </option>\n          <option value=\"sport\">\n            sport\n          </option>\n        </select>\n        \t<span id=\"tasks-count\" class=\"tasks-count\">${this.tasks.length} Tasks left</span>\n\t\t</div>\n\n\t\t<div id=${filterButtonsBlockId} class=${filterButtonsBlockId}>\n\t\t\t<button class=\"button ${filterButtonsClasses.all} \n          ${status === filterButtonsClasses.all ? 'active' : ''}\"\n      >All</button>\n\t\t\t<button class=\"button ${filterButtonsClasses.opened} \n          ${status === filterButtonsClasses.opened ? 'active' : ''}\"\n      >Opened</button>\n\t\t\t<button class=\"button ${filterButtonsClasses.completed} \n        ${status === filterButtonsClasses.completed ? 'active' : ''}\"\n      >Completed</button>\n\t\t</div>\n\t</div>\n\n\t<input class=\"search\" placeholder=\"search\" id=${inputFilterId}>\n\n\t<div class=${listBlockId} id=${listBlockId}>\n\t\n  </div>\n  `;\n\n    $mainBlock.appendChild($taskList);\n  }\n\n  initEventListeners () {\n    this.$mainActionsBlock.addEventListener('click', this.onClickMainActions);\n    this.$filterButtonsBlock.addEventListener(\n      'click',\n      this.onClickFilterButtons,\n    );\n    this.$taskTypeSelect.addEventListener('change', this.onChangeType);\n    this.$inputFilter.addEventListener('keyup', debounce(this.onInput));\n    this.$listBlock.addEventListener('click', this.onTaskChange);\n  }\n\n  createTaskElement ({ id, title, description, status }) {\n    const $taskItem = document.createElement('div');\n    $taskItem.classList.add('task-item', status);\n    $taskItem.id = id;\n\n    const $checkboxBlock = document.createElement('label');\n    $checkboxBlock.className = 'checkbox-container';\n    const $checkbox = document.createElement('input');\n    $checkbox.setAttribute('type', 'checkbox');\n    status === filterButtonsClasses.completed &&\n    $checkbox.setAttribute('checked', true);\n    const $span = document.createElement('span');\n    $span.className = 'checkmark';\n    $checkboxBlock.appendChild($checkbox);\n    $checkboxBlock.appendChild($span);\n\n    const $textBlock = document.createElement('div');\n    $textBlock.classList.add('task-text');\n    $textBlock.innerHTML = `\n        <div class=\"task-text__title\">${capitalize(title)}</div>\n        <div class=\"task-text__description\">${capitalize(description)}</div>  \n      `;\n\n    const $actionsBlock = document.createElement('div');\n    $actionsBlock.className = 'task-actions';\n    $actionsBlock.innerHTML = `\n        <i class=\"fa fa-pencil task-actions__button task-actions__edit\"></i>\n        <i class=\"fa fa-trash task-actions__button task-actions__remove\"></i> \n      `;\n\n    $taskItem.appendChild($checkboxBlock);\n    $taskItem.appendChild($textBlock);\n    $taskItem.appendChild($actionsBlock);\n\n    return $taskItem;\n  }\n\n  onClickMainActions ({ target }) {\n    const isButton = target.classList.contains('button');\n\n    if (isButton) {\n      if (target.classList.contains(addButtonClass)) {\n        modal.open(this.onCreateTask);\n      }\n\n      if (target.classList.contains(finishAllButtonClass)) {        \n        task_task.finishAll()\n          .then(data => data.map(({ task }) => task))\n          .then(tasks => {\n            this.tasks = tasks;\n            this.$listBlock.innerHTML = '';\n            this.renderTasks();\n\n            alert_alert.showSuccess('All tasks succefully complited.');\n          });\n      }\n\n      if (target.classList.contains(removeAllButtonClass)) {\n        task_task.removeAll()\n          .then(res => {\n            this.tasks = res;\n            this.$listBlock.innerHTML = '';\n            this.renderTasks();\n\n            alert_alert.showSuccess('All tasks succefully removed.');\n          })\n          .catch(alert_alert.showError);\n        \n      }\n    }\n  }\n\n  onCreateTask (task) {\n    this.$listBlock.innerHTML = '';\n    this.tasks.push(task);\n    this.renderTasks();\n\n    alert_alert.showSuccess('Task succefully created.');\n  }\n\n  onEditTask ($task, taskIndex) {\n    return updatedTask => {\n      const $newTask = this.createTaskElement(updatedTask);\n\n      this.tasks[taskIndex] = updatedTask;\n      this.$listBlock.replaceChild($newTask, $task);\n\n      alert_alert.showSuccess('Task succefully updated.');\n    };\n  }\n\n  onClickFilterButtons ({ target }) {\n    const rerenderTasks = filterValue => {\n      this.filtersState.status = filterValue;\n      this.$listBlock.innerHTML = '';\n      this.renderTasks();\n    };\n    const isButton = target.classList.contains('button');\n    const isClickedActiveFilter = target.classList.contains(\n      this.filtersState.button);\n\n    if (isButton && !isClickedActiveFilter) {\n      const $prevActiveFilter = [].find.call(\n        target.parentElement.children,\n        elem => elem.classList.contains('active'),\n      );\n      const filterValue = Object.keys(filterButtonsClasses).\n        find(value => target.classList.contains(value));\n\n      $prevActiveFilter.classList.remove('active');\n      target.classList.add('active');\n\n      filterValue && rerenderTasks(filterValue);\n    }\n  }\n\n  onChangeType ({ target: { value } }) {\n    this.filtersState.type = value;\n    this.$listBlock.innerHTML = '';\n    this.renderTasks();\n  }\n\n  updateFilters (name, value) {\n    this.filtersState[name] = value;\n    this.$listBlock.innerHTML = '';\n    this.renderTasks();\n  }\n\n  onInput ({ target }) {\n    const value = target.value.trim();\n    this.updateFilters('text', value);\n  }\n\n  onTaskChange ({ target }) {\n    const { tasks } = this;\n    const $task = target.parentElement.parentElement;\n    const taskId = $task.id;\n    const taskIndex = tasks.findIndex(({ id }) => id === taskId);\n    const taskActions = {\n      remove: {\n        isCurrent: target.classList.contains('task-actions__remove'),\n        run: () => {\n          task_task.remove(taskId)\n            .then(newTasks => {\n              this.tasks = newTasks;\n              this.$taskCount.innerHTML = `<b>${countActiveTasks(\n                this.tasks)}</b> Tasks left`;\n\n              if (newTasks.length) {\n                this.$listBlock.removeChild($task);\n              } else {\n                const text = `You haven't any ${status === 'all' ? '' : status} tasks.`;\n                this.$listBlock.innerHTML = `<h2 class=\"no-tasks\">${text}</h2>`;\n              }\n\n              alert_alert.showSuccess('Task succefully removed.');\n            })\n            .catch(alert_alert.showError);\n        },\n      },\n      edit: {\n        isCurrent: target.classList.contains('task-actions__edit'),\n        run: () => modal.open(this.onEditTask($task, taskIndex),\n          tasks[taskIndex]),\n      },\n      changeStatus: {\n        isCurrent: target.type === 'checkbox',\n        run: () => {\n          const isChecked = target.checked;\n          const taskObj = this.tasks[taskIndex];\n          const status = isChecked ? taskStatuses.completed : taskStatuses.opened;\n          const task = new task_task({ ...taskObj, status });\n\n          task.save()\n            .then(({ task }) => {\n              if (isChecked) {\n                $task.classList.add(taskStatuses.completed);\n                $task.classList.remove(taskStatuses.opened);\n              } else {\n                $task.classList.remove(taskStatuses.completed);\n                $task.classList.add(taskStatuses.opened);\n              }\n\n              this.tasks[taskIndex] = task;\n              this.$listBlock.innerHTML = '';\n              this.renderTasks();\n\n              alert_alert.showSuccess('Task succefully updated.');\n            })\n            .catch(alert_alert.showError);\n        },\n      },\n    };\n\n    const action = Object.values(taskActions).find(({ isCurrent }) => isCurrent);\n\n    if (action) {\n      action.run();\n    }\n  }\n\n  renderTasks () {\n    const { status, type, text } = this.filtersState;\n    const filteredTasks = this.tasks\n      .filter(task => {\n        // Find tasks which satisfy the filter params\n        if (\n          (status !== 'all' && task.status !== status)\n          || (type !== 'all' && task.type !== type)\n          || (text && task.title.toLowerCase().indexOf(text.toLowerCase()) === -1\n            && task.description.toLowerCase().indexOf(text.toLowerCase()) === -1)\n        ) {\n          return false;\n        }\n\n        return true;\n      });\n    const tasks = sortTasks(filteredTasks);\n\n    this.$taskCount.innerHTML = `<b>${countActiveTasks(\n      this.tasks)}</b> Tasks left`;\n\n    if (tasks.length) {\n      tasks.forEach(taskObj => {\n        const $taskItem = this.createTaskElement(taskObj);\n        this.$listBlock.appendChild($taskItem);\n      });\n    } else {\n      const text = `You haven't any ${status === 'all' ? '' : status} tasks.`;\n      this.$listBlock.innerHTML = `<h2 class=\"no-tasks\">${text}</h2>`;\n    }\n  }\n}\n\n/* harmony default export */ var taskList = (taskList_TaskList);\n\n// EXTERNAL MODULE: ./src/styles/index.scss\nvar styles = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const tasks = localStorageService.get();\n\n  new taskList(tasks);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")}]);